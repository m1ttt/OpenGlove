// Space Glove (prueba)

/* DEFINICIÃ“N DE PINES */

/* BUS I2C 1 */
#define SDA_1 21 // ROJO
#define SCL_1 22 // NEGRO

/* BUS I2C 2 */
#define SDA_2 33 // ROJO
#define SCL_2 32 // NEGRO

#define BOTON_CAPTURADOR 18
// #define SENSOR_MENIQUE 27
#define SENSOR_PULGAR 14

#define LED_PLACA 2
#define READINGS_PER_SAMPLE 200
#define THRESHOLD 20

/* Lbrerias usadas */
#include <Arduino.h>
#include <Adafruit_MPU6050.h>
#include <Wire.h> // LIBRERIA PARA I2C
#include <TensorFlowLite_ESP32.h>
#include <tensorflow/lite/micro/all_ops_resolver.h>
#include <tensorflow/lite/micro/micro_error_reporter.h>
#include <tensorflow/lite/micro/micro_interpreter.h>
#include <tensorflow/lite/schema/schema_generated.h>
#include "data/model.h"
#include <Talkie.h>

/* SENSOR MPU6050 */

Adafruit_MPU6050 sensores[5];
Talkie voice;

float ax;
float ay;
float az;
float baseAx;
float baseAy;
float baseAz;
boolean flag_MEN_PULG_ANU = false;
int contador = 1;

const uint8_t spA[] PROGMEM = {0x65, 0x2C, 0x96, 0xAD, 0x7B, 0x6A, 0x9F, 0x66, 0xE4, 0x20, 0x8D, 0x9C, 0x73, 0xAB, 0x5B, 0xDC, 0xE2, 0x96, 0xB7, 0xBA, 0xF5, 0x6A, 0x66, 0x28, 0xA0, 0xCE, 0xD5, 0xBB, 0xDB, 0xFD, 0x1E, 0xE6, 0x38, 0xA7, 0x36, 0xCF, 0x9C, 0x80, 0x51, 0x8B, 0xEB, 0x52, 0xD7, 0xBC, 0xFF, 0x3F};
const uint8_t spB[] PROGMEM = {0xA6, 0x2F, 0xAA, 0x05, 0x5C, 0xD6, 0x8C, 0xBC, 0xC7, 0x16, 0x70, 0x59, 0x33, 0xB2, 0x95, 0x0B, 0xC1, 0xFD, 0xCD, 0xCC, 0x66, 0x3A, 0xF3, 0x51, 0xAD, 0x98, 0x00, 0x55, 0x8B, 0x67, 0xDB, 0xC7, 0x3E, 0xD5, 0xAD, 0xEE, 0x75, 0x2F, 0xE7, 0x2C, 0x4D, 0x60, 0xBE, 0x26, 0xDF, 0xF1, 0x89, 0xEF, 0xFF, 0x03};
const uint8_t spC[] PROGMEM = {0x04, 0xF8, 0xA5, 0x83, 0x03, 0x12, 0xB0, 0x80, 0x07, 0x22, 0xB0, 0xC2, 0xEE, 0x8D, 0x45, 0x7D, 0xC9, 0xCA, 0x67, 0x29, 0x42, 0xF5, 0x35, 0x3B, 0xDF, 0xF9, 0x28, 0x66, 0x0D, 0x40, 0xCF, 0xD7, 0xB3, 0x1C, 0xCD, 0xAC, 0x06, 0x14, 0xB5, 0x68, 0x0E, 0x7D, 0xEE, 0x4B, 0xDF, 0xD2, 0x39, 0x5B, 0x02, 0x44, 0xBD, 0xCE, 0x57, 0xBE, 0xF2, 0x9D, 0xEE, 0x55, 0x0A, 0xC1, 0x73, 0x4D, 0x7E, 0xF2, 0xF3, 0xFF};
const uint8_t spD[] PROGMEM = {0x06, 0x98, 0x30, 0x68, 0xE4, 0x6B, 0x84, 0xA0, 0xE8, 0xD3, 0x93, 0x8D, 0xEC, 0x84, 0x9E, 0x4B, 0x6E, 0x36, 0x8A, 0x19, 0x0D, 0xA8, 0xEA, 0x71, 0xAF, 0x7A, 0xDF, 0xE7, 0xB2, 0xAD, 0xE0, 0x00, 0xD3, 0x8B, 0xEB, 0x9E, 0x8F, 0x7C, 0xA6, 0x73, 0xE5, 0x40, 0xA8, 0x5A, 0x1C, 0xAF, 0x78, 0xC5, 0xDB, 0xDF, 0xFF, 0x0F};
const uint8_t spE[] PROGMEM = {0xA2, 0x59, 0x95, 0x51, 0xBA, 0x17, 0xF7, 0x6A, 0x95, 0xAB, 0x38, 0x42, 0xE4, 0x92, 0x5D, 0xEE, 0x62, 0x15, 0x33, 0x3B, 0x50, 0xD6, 0x92, 0x5D, 0xAE, 0x6A, 0xC5, 0x04, 0xA8, 0x5A, 0xBC, 0xEB, 0xDD, 0xEC, 0x76, 0x77, 0xBB, 0xDF, 0xD3, 0x9E, 0xF6, 0x32, 0x97, 0xBE, 0xF5, 0xAD, 0xED, 0xB3, 0x34, 0x81, 0xF9, 0x9A, 0xFF, 0x07};
const uint8_t spF[] PROGMEM = {0xAB, 0x1B, 0x61, 0x94, 0xDD, 0xD6, 0xDC, 0xF1, 0x74, 0xDD, 0x37, 0xB9, 0xE7, 0xEA, 0xD3, 0x35, 0xB3, 0x1C, 0xE1, 0xAF, 0x6F, 0x77, 0xC7, 0xB5, 0xD4, 0xE0, 0x56, 0x9C, 0x77, 0xDB, 0x5A, 0x9D, 0xEB, 0x98, 0x8C, 0x61, 0xC0, 0x30, 0xE9, 0x1A, 0xB0, 0x80, 0x05, 0x14, 0x30, 0x6D, 0xBB, 0x06, 0x24, 0x20, 0x01, 0x0E, 0x10, 0xA0, 0x06, 0xB5, 0xFF, 0x07};
const uint8_t spG[] PROGMEM = {0x6E, 0x3F, 0x29, 0x8D, 0x98, 0x95, 0xCD, 0x3D, 0x00, 0xAB, 0x38, 0x95, 0xE2, 0xD4, 0xEB, 0x34, 0x81, 0x7A, 0xF2, 0x51, 0x53, 0x50, 0x75, 0xEB, 0xCE, 0x76, 0xB6, 0xD3, 0x95, 0x8D, 0x92, 0x48, 0x99, 0xAB, 0x77, 0xBE, 0xCB, 0xDD, 0x8E, 0x71, 0x96, 0x04, 0x8C, 0x5A, 0x3C, 0xE7, 0x39, 0xF7, 0xAD, 0x6E, 0xF5, 0x2A, 0xD7, 0x2A, 0x85, 0xE0, 0xB9, 0x26, 0x3E, 0xF1, 0xF9, 0x7F};
const uint8_t spH[] PROGMEM = {0x65, 0x18, 0x6D, 0x90, 0x2D, 0xD6, 0xEC, 0xF6, 0x56, 0xB7, 0xBC, 0xC5, 0xAE, 0xC7, 0x30, 0xA3, 0x01, 0x6D, 0x2D, 0xCE, 0x8B, 0x3D, 0xDC, 0xD6, 0x3C, 0x61, 0x76, 0xC5, 0x25, 0x9B, 0x08, 0xE5, 0x2E, 0x22, 0x1B, 0x00, 0x80, 0x01, 0x2B, 0x87, 0x38, 0x60, 0xE5, 0xED, 0x08, 0x58, 0xC0, 0x02, 0x16, 0xB0, 0x80, 0x06, 0x34, 0x40, 0x80, 0x76, 0xD3, 0xFE, 0x1F};
const uint8_t spI[] PROGMEM = {0xAA, 0x8D, 0x63, 0xA8, 0xAA, 0x66, 0xAD, 0xB9, 0xA8, 0xCB, 0x08, 0xDD, 0x7C, 0xFB, 0x5B, 0xDF, 0xFA, 0x36, 0xB7, 0x39, 0x6D, 0xB5, 0xA3, 0x15, 0xBA, 0xF8, 0x76, 0xBB, 0xDF, 0xD3, 0x9E, 0xD7, 0xDA, 0x5C, 0x49, 0xA5, 0x2D, 0xDE, 0x7B, 0xDB, 0x6B, 0x76, 0x29, 0xAF, 0xC7, 0x6D, 0xEF, 0x31, 0xD8, 0x5C, 0x1E, 0xF7, 0xBD, 0x1E, 0xF5, 0x48, 0xE7, 0x28, 0x89, 0xE2, 0xF2, 0x38, 0x5F, 0xF9, 0xFE, 0x7F};
const uint8_t spL[] PROGMEM = {0x6B, 0x68, 0x2E, 0xD8, 0x2A, 0x37, 0xDF, 0xFE, 0xF6, 0xA7, 0xAF, 0x21, 0xBC, 0xC4, 0x17, 0xDF, 0xFE, 0xF6, 0x67, 0xC8, 0x6A, 0xC3, 0x4D, 0x3A, 0xDF, 0x61, 0x4D, 0x95, 0x6C, 0xA6, 0x71, 0x9E, 0xB1, 0x36, 0x98, 0x53, 0x49, 0x5E, 0xFB, 0x5A, 0x8E, 0x0A, 0x7A, 0x43, 0xD9, 0x4F, 0x3C, 0xC2, 0x59, 0xE0, 0xF4, 0x08, 0xF9, 0x09, 0x67, 0x03, 0x31, 0x19, 0xA2, 0x25, 0x9E, 0xFF, 0x0F};
const uint8_t spJ[] PROGMEM = {0x6E, 0x5A, 0xC1, 0x99, 0x54, 0xB2, 0x09, 0x60, 0x49, 0x22, 0x07, 0xEC, 0xA8, 0x16, 0x80, 0x5D, 0x26, 0xC7, 0xD0, 0xA3, 0x92, 0x78, 0x74, 0x3E, 0x55, 0x2F, 0x21, 0x6A, 0xB1, 0xFA, 0x56, 0xB7, 0xBA, 0xD5, 0xAD, 0x6F, 0x7D, 0xBB, 0x3D, 0x8E, 0x75, 0xB4, 0x22, 0x36, 0x7F, 0x53, 0xCF, 0x7E, 0xB5, 0x67, 0x96, 0x61, 0x34, 0xDB, 0x52, 0x9F, 0xF4, 0x8E, 0xDC, 0x88, 0xE1, 0x5F, 0xF2, 0x9D, 0xEF, 0xFF, 0x07};
const uint8_t spK[] PROGMEM = {0x01, 0x18, 0x91, 0xB9, 0x00, 0x4D, 0x91, 0x46, 0x60, 0x65, 0x2D, 0xB3, 0xB8, 0x67, 0xED, 0x53, 0xF4, 0x14, 0x64, 0x11, 0x4B, 0x6E, 0x79, 0x8B, 0x5B, 0xDE, 0xF2, 0x74, 0xC3, 0x05, 0x6A, 0xE7, 0xEA, 0x3D, 0xEC, 0x71, 0x2F, 0x6D, 0x1F, 0xB1, 0x00, 0x2B, 0xDF, 0xF4, 0xA3, 0x1D, 0xB3, 0x24, 0x60, 0xD4, 0xE2, 0x7A, 0xE5, 0x2B, 0xDF, 0xE9, 0x1E, 0x43, 0x48, 0xA3, 0xEB, 0xE4, 0xFB, 0xFF, 0x01};
const uint8_t spM[] PROGMEM = {0xA9, 0xE8, 0xC5, 0xD8, 0x73, 0x16, 0xCF, 0xE2, 0x0E, 0xB7, 0xBB, 0xCD, 0xA9, 0xBB, 0x6F, 0xF1, 0xF0, 0xD5, 0xB7, 0xBE, 0xCD, 0xEE, 0xC6, 0x50, 0x63, 0x72, 0x98, 0x58, 0xEE, 0x73, 0x5F, 0xDB, 0xD6, 0x62, 0x72, 0x98, 0x58, 0xAE, 0x7B, 0xDD, 0xD3, 0x5E, 0x45, 0x72, 0x93, 0xD8, 0x8D, 0x87, 0x3D, 0xEC, 0x61, 0xCF, 0x70, 0x96, 0x58, 0xE1, 0xA2, 0x4D, 0xE2, 0x15, 0xEF, 0xFF, 0x07};
const uint8_t spN[] PROGMEM = {0x41, 0xEE, 0xD1, 0xC8, 0xB3, 0x16, 0xEF, 0xEE, 0xD4, 0xC3, 0x35, 0x59, 0xC4, 0xE3, 0x5B, 0xDD, 0xEA, 0x56, 0xBB, 0x59, 0xED, 0x92, 0xCD, 0x91, 0xB4, 0x78, 0x4F, 0x63, 0x19, 0x9E, 0x38, 0x2C, 0x9C, 0xCE, 0xA5, 0xAF, 0xF5, 0x08, 0xC7, 0xB0, 0xC2, 0x61, 0x1E, 0x35, 0x1E, 0xF1, 0x8C, 0x57, 0xBC, 0xD3, 0xDD, 0x4D, 0x49, 0xB8, 0xCE, 0x0E, 0xF7, 0x34, 0xAD, 0x16, 0xBC, 0xF9, 0xFF, 0x01};
const uint8_t spO[] PROGMEM = {0xA3, 0x6D, 0xB4, 0xBA, 0x8D, 0xBC, 0xAD, 0xA6, 0x92, 0xEC, 0x0E, 0xF2, 0xB6, 0xAB, 0x5D, 0x8C, 0xA2, 0xE0, 0xEE, 0x16, 0xF6, 0x3F, 0xCB, 0x39, 0xCC, 0xB1, 0xAC, 0x91, 0xE5, 0x0C, 0x8B, 0xBF, 0xB0, 0x3B, 0xD3, 0x1D, 0x28, 0x59, 0xE2, 0xE9, 0x4F, 0x7B, 0xF9, 0xE7, 0xFF, 0x01};
const uint8_t spP[] PROGMEM = {0x02, 0x88, 0x26, 0xD4, 0x00, 0x6D, 0x96, 0xB5, 0xB8, 0x25, 0x05, 0x89, 0x6C, 0x3D, 0xD2, 0xE6, 0x51, 0xB3, 0xA6, 0xF4, 0x48, 0x67, 0x09, 0xA0, 0x8C, 0xC7, 0x33, 0x9B, 0x79, 0xCB, 0x67, 0x0E, 0x80, 0xCA, 0xD7, 0xBD, 0x6A, 0xD5, 0x72, 0x06, 0xB4, 0xB5, 0xBA, 0xB7, 0xBD, 0xAF, 0x73, 0x5D, 0xF3, 0x91, 0x8F, 0x78, 0xFE, 0x3F};
const uint8_t spQ[] PROGMEM = {0x0E, 0x98, 0xD5, 0x28, 0x02, 0x11, 0x18, 0xE9, 0xCC, 0x46, 0x98, 0xF1, 0x66, 0xA7, 0x27, 0x1D, 0x21, 0x99, 0x92, 0xB6, 0xDC, 0x7C, 0x17, 0xAB, 0x2C, 0xD2, 0x2D, 0x13, 0x3B, 0xEF, 0xAA, 0x75, 0xCE, 0x94, 0x47, 0xD0, 0xEE, 0x3A, 0xC4, 0x29, 0x2F, 0x61, 0x35, 0x31, 0xA2, 0x50, 0xB6, 0xF8, 0xCD, 0x1F, 0xFF, 0x0F};
const uint8_t spR[] PROGMEM = {0xAB, 0xC8, 0x72, 0x33, 0x93, 0xBB, 0xDC, 0xEE, 0xB6, 0xB7, 0xB9, 0xF5, 0x68, 0x53, 0x5C, 0xA9, 0xA6, 0x4D, 0xB3, 0x6B, 0x73, 0x0A, 0xCB, 0x71, 0xD8, 0xBB, 0xAF, 0x7D, 0x2F, 0x47, 0xB6, 0xC7, 0xF4, 0x94, 0x37, 0x9D, 0xA9, 0x34, 0xF8, 0x53, 0x97, 0x78, 0xFD, 0x3F};
const uint8_t spS[] PROGMEM = {0x6B, 0x6E, 0xD9, 0x34, 0x6C, 0xE6, 0xDC, 0xF6, 0x36, 0xB7, 0xBE, 0xF5, 0x19, 0xAA, 0x0F, 0x2D, 0xDA, 0x25, 0x7B, 0x19, 0x5B, 0x4D, 0x9A, 0xA2, 0xE7, 0xB8, 0x1D, 0x23, 0xA5, 0x26, 0x71, 0x2A, 0x03, 0xFC, 0x94, 0xE6, 0x01, 0x0F, 0x68, 0x40, 0x03, 0x12, 0xE0, 0x00, 0x07, 0x30, 0xF0, 0xFF};
const uint8_t spT[] PROGMEM = {0x01, 0xD8, 0xB6, 0xDD, 0x01, 0x2F, 0xF4, 0x38, 0x60, 0xD5, 0xD1, 0x91, 0x4D, 0x97, 0x84, 0xE6, 0x4B, 0x4E, 0x36, 0xB2, 0x10, 0x67, 0xCD, 0x19, 0xD9, 0x2C, 0x01, 0x94, 0xF1, 0x78, 0x66, 0x33, 0xEB, 0x79, 0xAF, 0x7B, 0x57, 0x87, 0x36, 0xAF, 0x52, 0x08, 0x9E, 0x6B, 0xEA, 0x5A, 0xB7, 0x7A, 0x94, 0x73, 0x45, 0x47, 0xAC, 0x5A, 0x9C, 0xAF, 0xFF, 0x07};
const uint8_t spU[] PROGMEM = {0xA1, 0x9F, 0x9C, 0x94, 0x72, 0x26, 0x8D, 0x76, 0x07, 0x55, 0x90, 0x78, 0x3C, 0xEB, 0x59, 0x9D, 0xA2, 0x87, 0x60, 0x76, 0xDA, 0x72, 0x8B, 0x53, 0x36, 0xA5, 0x64, 0x2D, 0x7B, 0x6E, 0xB5, 0xFA, 0x24, 0xDC, 0x32, 0xB1, 0x73, 0x1F, 0xFA, 0x1C, 0x16, 0xAB, 0xC6, 0xCA, 0xE0, 0xB5, 0xDF, 0xCD, 0xA1, 0xD4, 0x78, 0x1B, 0xB6, 0x53, 0x97, 0x74, 0xA7, 0x21, 0xBC, 0xE4, 0xFF, 0x01};
const uint8_t spV[] PROGMEM = {0x66, 0xF3, 0xD2, 0x38, 0x43, 0xB3, 0xD8, 0x2D, 0xAC, 0x4D, 0xBB, 0x70, 0xB0, 0xDB, 0xB0, 0x0E, 0x17, 0x2C, 0x26, 0xAE, 0xD3, 0x32, 0x6C, 0xBB, 0x32, 0xAB, 0x19, 0x63, 0xF7, 0x21, 0x6C, 0x9C, 0xE5, 0xD4, 0x33, 0xB6, 0x80, 0xCB, 0x9A, 0x9B, 0xAF, 0x6C, 0xE5, 0x42, 0x70, 0x7F, 0xB3, 0xB3, 0x9D, 0xEE, 0x7C, 0x55, 0x2B, 0x26, 0x40, 0xD5, 0xE2, 0xD9, 0xF6, 0xB1, 0x4F, 0x75, 0xAB, 0x7B, 0x3D, 0xCA, 0x35, 0x4B, 0x13, 0x98, 0xAF, 0xA9, 0x57, 0x7E, 0xF3, 0x97, 0xBE, 0x19, 0x0B, 0x31, 0xF3, 0xCD, 0xFF, 0x03};
const uint8_t spW[] PROGMEM = {0xA1, 0xDE, 0xC2, 0x44, 0xC2, 0xFC, 0x9C, 0x6A, 0x88, 0x70, 0x09, 0x59, 0x7B, 0x8A, 0xCA, 0x3B, 0x3D, 0xA4, 0xCF, 0xCD, 0x56, 0x96, 0xC4, 0xA6, 0xBB, 0xF4, 0x6E, 0x59, 0xE2, 0x9D, 0xEA, 0xE2, 0x4A, 0xD5, 0x12, 0x65, 0xBB, 0xB3, 0xEB, 0x51, 0x57, 0x12, 0x99, 0xC1, 0xD9, 0x6E, 0xB7, 0xC7, 0x31, 0x35, 0x92, 0x6A, 0xC9, 0x9B, 0xC7, 0x34, 0x4C, 0x12, 0x46, 0x6C, 0x99, 0x73, 0x5F, 0xDA, 0xD2, 0x92, 0x92, 0x64, 0x6C, 0xEE, 0x6B, 0xD9, 0x6A, 0x22, 0x71, 0x8F, 0xCF, 0xE5, 0x2C, 0x41, 0xD4, 0xDD, 0x36, 0xA5, 0x3B, 0x19, 0xF5, 0x0C, 0xEE, 0x13, 0xEF, 0xFC, 0x9A, 0xD7, 0x85, 0xC8, 0x62, 0xEE, 0x6D, 0xBF, 0xFF, 0x07};
const uint8_t spX[] PROGMEM = {0xAD, 0x68, 0xC9, 0xC5, 0x32, 0x56, 0xDF, 0xFA, 0x54, 0x2D, 0x35, 0x7B, 0xF8, 0xEA, 0x5B, 0xDD, 0xE6, 0x4C, 0x6D, 0x04, 0xA6, 0xC5, 0xEA, 0xB9, 0x84, 0xB5, 0x75, 0x23, 0x37, 0x4F, 0x83, 0x40, 0x11, 0xCA, 0x5D, 0x44, 0x36, 0x00, 0x28, 0xA0, 0xE6, 0x31, 0x0F, 0x68, 0xC0, 0x00, 0xBF, 0x8D, 0x79, 0xC0, 0x03, 0x16, 0xD0, 0x00, 0x07, 0xFE, 0x1F};
const uint8_t spY[] PROGMEM = {0x6A, 0xB1, 0xA2, 0xA7, 0x95, 0xD2, 0xD8, 0x25, 0x0F, 0xA3, 0x2D, 0xB2, 0x7A, 0x1C, 0xB3, 0xDE, 0xE6, 0xD4, 0x45, 0x6D, 0x56, 0xCA, 0x9A, 0x5B, 0xDF, 0xFA, 0xB6, 0xBB, 0xDB, 0xFD, 0x1A, 0x8A, 0x6F, 0x2B, 0xF3, 0x37, 0x7B, 0x19, 0x4B, 0xD3, 0x25, 0x39, 0xFA, 0xB9, 0x6F, 0x6D, 0xEB, 0x31, 0xC4, 0x5C, 0x1E, 0xF7, 0xAD, 0x1F, 0xE5, 0x1C, 0xA5, 0x48, 0x5C, 0x1E, 0xD7, 0x2B, 0x5F, 0xF9, 0xFA, 0x7F};
const uint8_t spZ[] PROGMEM = {0x6D, 0xFD, 0xC6, 0x5C, 0x95, 0xD5, 0xF5, 0xD5, 0x02, 0x7B, 0x5D, 0xFD, 0x51, 0x2D, 0x2A, 0xE4, 0x77, 0x75, 0xA3, 0x3A, 0xB1, 0xFA, 0x9B, 0x5D, 0xEF, 0x6A, 0x55, 0x33, 0x27, 0x60, 0xD4, 0xE2, 0xD9, 0xCC, 0x76, 0x4E, 0x73, 0x9D, 0x7B, 0x3F, 0xFB, 0x59, 0xAE, 0x55, 0x0A, 0xC1, 0x73, 0x4D, 0xBD, 0xEA, 0x9D, 0x9E, 0x15, 0x12, 0xA0, 0x6B, 0x75, 0x7E, 0xFE, 0x1F};

/* BUSES I2C */
TwoWire I2Cuno = TwoWire(0); // Primer bus I2C
TwoWire I2Cdos = TwoWire(1); // Segundo bus I2C

boolean vsensor1, vsensor2, vsensor3, vsensor4;

// global variables used for TensorFlow Lite (Micro)
tflite::MicroErrorReporter tflErrorReporter;

// pull in all the TFLM ops, you can remove this line and
// only pull in the TFLM ops you need, if would like to reduce
// the compiled size of the sketch.
tflite::AllOpsResolver tflOpsResolver;

const tflite::Model *tflModel = nullptr;
tflite::MicroInterpreter *tflInterpreter = nullptr;
TfLiteTensor *tflInputTensor = nullptr;
TfLiteTensor *tflOutputTensor = nullptr;

// Create a static memory buffer for TFLM, the size may need to
// be adjusted based on the model you are using
constexpr int tensorArenaSize = 8 * 2048;
byte tensorArena[tensorArenaSize] __attribute__((aligned(16)));

// array to map gesture index to a name
const char *GESTURES[] = {
    "Letra A",
    "Letra B"};

#define NUM_GESTURES (sizeof(GESTURES) / sizeof(GESTURES[0]))

/* INICIALIZACIÃ“N DE SENSORES */
void incializarSensores()
{
    for (int i = 1; i <= 4; i++)
    {
        sensores[i].setAccelerometerRange(MPU6050_RANGE_16_G); // RANGO DE ACELEROMETRO
        sensores[i].setGyroRange(MPU6050_RANGE_250_DEG);       // RANGO DEL GIROSCOPIO
        sensores[i].setFilterBandwidth(MPU6050_BAND_21_HZ);
    }
}

/* FUNCION QUE OBTIENE LOS VALORES DEL SENSOR (DED01) */
void obtenerSensores(int n)
{
    // /* OBTIENE LOS VALORES DEL SENSOR DED01*/
    // if (n < 4)
    // {
    //     digitalWrite(SENSOR_MENIQUE, LOW);
    //     digitalWrite(SENSOR_PULGAR, LOW);
    // }
    // else if (n == 4 && !flag_MEN_PULG_ANU)
    // {
    //     digitalWrite(SENSOR_MENIQUE, LOW); // 0X68
    //     digitalWrite(SENSOR_PULGAR, HIGH); // 0X69
    // }
    // else if (n == 4 && flag_MEN_PULG_ANU)
    // {
    //     digitalWrite(SENSOR_MENIQUE, HIGH); // 0X69
    //     digitalWrite(SENSOR_PULGAR, LOW);   // 0X68
    // }
    sensors_event_t a, g, temp;
    sensores[n].getEvent(&a, &g, &temp);
    float coord_y = a.acceleration.y;
    Serial.print(a.acceleration.x, 3);
    Serial.print(" ");
    Serial.print(a.acceleration.y, 3);
    Serial.print(" ");
    Serial.print(a.acceleration.z, 3);
    Serial.print(" ");
    Serial.print(n);
    Serial.println();
    // if (flag_MEN_PULG_ANU == true)
    // {
    //     Serial.print(" ");
    //     Serial.print(5);
    //     Serial.println();
    // }
    // else
    // {
    //     Serial.print(" ");
    //     Serial.print(n);
    //     Serial.println();
    // }
    // if (n == 4 && !flag_MEN_PULG_ANU)
    // {
    //     // digitalWrite(SENSOR_PULGAR, LOW);
    //     // digitalWrite(SENSOR_MENIQUE, HIGH);
    //     flag_MEN_PULG_ANU = true;
    //     // delay(1000);
    //     // Serial.println("=================================================================");
    //     obtenerSensores(4);
    //     // digitalWrite(SENSOR_MENIQUE, LOW);
    //     // digitalWrite(SENSOR_PULGAR, HIGH);
    //     flag_MEN_PULG_ANU = false;
    // }
    // else
    // {
    //     // delay(1000);
    // }
}

void obtenerSensores2(int n)
{
    // /* OBTIENE LOS VALORES DEL SENSOR DED01*/
    // if (n < 4)
    // {
    //     digitalWrite(SENSOR_MENIQUE, LOW);
    //     digitalWrite(SENSOR_PULGAR, LOW);
    // }
    // else if (n == 4 && !flag_MEN_PULG_ANU)
    // {
    //     digitalWrite(SENSOR_MENIQUE, LOW); // 0X68
    //     digitalWrite(SENSOR_PULGAR, HIGH); // 0X69
    // }
    // else if (n == 4 && flag_MEN_PULG_ANU)
    // {
    //     digitalWrite(SENSOR_MENIQUE, HIGH); // 0X69
    //     digitalWrite(SENSOR_PULGAR, LOW);   // 0X68
    // }
    sensors_event_t a, g, temp;
    sensores[n].getEvent(&a, &g, &temp);
    ax = a.acceleration.x - baseAx;
    ay = a.acceleration.y - baseAy;
    az = a.acceleration.z - baseAz;
    if (n == 4 && !flag_MEN_PULG_ANU)
    {
        // digitalWrite(SENSOR_PULGAR, LOW);
        // digitalWrite(SENSOR_MENIQUE, HIGH);
        flag_MEN_PULG_ANU = true;
        // delay(1000);
        // Serial.println("=================================================================");
        obtenerSensores2(4);
        // digitalWrite(SENSOR_MENIQUE, LOW);
        // digitalWrite(SENSOR_PULGAR, HIGH);
        flag_MEN_PULG_ANU = false;
    }
    else
    {
        // delay(1000);
    }
}

void err_Conexion()
{
    Serial.println("No se pudo conectar con alguno de los sensores");
    Serial.println(vsensor1);
    Serial.println(vsensor2);
    Serial.println(vsensor3);
    Serial.println(vsensor4);
    while (1)
    {
        delay(10);
        digitalWrite(LED_PLACA, HIGH);
        delay(500);
        digitalWrite(LED_PLACA, LOW);
        delay(500);
    }
}

void run_inference()
{
    sensors_event_t a, g, temp;
    for (int i = 0; i < 42; i++)
    {
        for (int a = 1; a <= 3; a++)
        {
            obtenerSensores2(a);
            tflInputTensor->data.f[i * 3 + 0] = (ax + 8.0) / 16.0;
            tflInputTensor->data.f[i * 3 + 1] = (ay + 8.0) / 16.0;
            tflInputTensor->data.f[i * 3 + 2] = (az + 8.0) / 16.0;
        }
    }

    TfLiteStatus invokeStatus = tflInterpreter->Invoke();

    for (int i = 0; i < NUM_GESTURES; i++)
    {
        Serial.print(GESTURES[i]);
        Serial.print(": ");
        Serial.println(tflOutputTensor->data.f[i], 6);
    }
    Serial.println();
}
void detectMovement()
{

    run_inference();
}
void calibrate_sensor()
{
    float totX, totY, totZ;
    sensors_event_t a, g, temp;

    for (int i = 0; i < 10; i++)
    {
        sensores[1].getEvent(&a, &g, &temp);
        totX = totX + a.acceleration.x;
        totY = totY + a.acceleration.y;
        totZ = totZ + a.acceleration.z;
    }
    baseAx = totX / 10;
    baseAy = totY / 10;
    baseAz = totZ / 10;
}

void iniciarlizarPines()
{
    pinMode(BOTON_CAPTURADOR, INPUT);
    pinMode(18, INPUT);
    pinMode(LED_PLACA, OUTPUT); // LED PLACA
    pinMode(SENSOR_PULGAR, OUTPUT);
    digitalWrite(SENSOR_PULGAR, HIGH);
    pinMode(25, OUTPUT);
    I2Cuno.begin(SDA_1, SCL_1, 40000UL); // INCIIALIZACIÃ“N DE BUS 1
    I2Cdos.begin(SDA_2, SCL_2, 40000UL); // INICIALIZACIÃ“N DE BUS 2
    Serial.begin(115200);
}

void inicializarTensorFlow()
{
    tflModel = tflite::GetModel(model);
    if (tflModel->version() != TFLITE_SCHEMA_VERSION)
    {
        Serial.println("Model schema mismatch!");
        while (1)
            ;
    }

    // Create an interpreter to run the model
    tflInterpreter = new tflite::MicroInterpreter(tflModel, tflOpsResolver, tensorArena, tensorArenaSize, &tflErrorReporter);

    // Allocate memory for the model's input and output tensors
    tflInterpreter->AllocateTensors();

    // Get pointers for the model's input and output tensors
    tflInputTensor = tflInterpreter->input(0);
    tflOutputTensor = tflInterpreter->output(0);
}

void inicializarPuertosI2C()
{
    // APERTURA DE MONITOR SERIAL.
    while (!Serial)
        ;
    vsensor2 = sensores[1].begin(0x68, &I2Cuno);
    vsensor3 = sensores[2].begin(0x69, &I2Cdos);
    vsensor4 = sensores[3].begin(0x68, &I2Cdos);
    if (!vsensor2 || !vsensor3 || !vsensor4) // INICIO DE SENSORES.
    {
        err_Conexion();
    }
}
/* FUNCIÃ“N DE INICIO DE LA PLACA */
void setup()
{

    iniciarlizarPines();
    voice.say(spA);
    voice.say(spB);
    inicializarPuertosI2C();
    digitalWrite(LED_PLACA, HIGH);
    incializarSensores(); // FUNCIÃ“N QUE INICIALIZA LOS PARAMETROS DE SENSORES, COMO LOS GRADOS DE MOVIMIENTO ETC.
    inicializarTensorFlow();
}

/* FUNCIÃ“N EN CONSTANTE REPETICIÃ“N */
void loop()
{
    detectMovement();
}